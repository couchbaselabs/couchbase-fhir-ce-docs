"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[460],{1878:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"API/search-revinclude","title":"Search with _revinclude","description":"\\\\_revinclude returns resources that reference your primary matches, in the same Bundle.","source":"@site/docs/API/search-revinclude.mdx","sourceDirName":"API","slug":"/API/search-revinclude","permalink":"/docs/API/search-revinclude","draft":false,"unlisted":false,"editUrl":"https://github.com/couchbaselabs/couchbase-fhir-ce-docs/tree/master/docs/API/search-revinclude.mdx","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Search with _revinclude"},"sidebar":"tutorialSidebar","previous":{"title":"Search - Basic","permalink":"/docs/API/search-basic"},"next":{"title":"Search with _include and chain","permalink":"/docs/API/search-chain"}}');var i=r(4848),t=r(8453);const l={sidebar_position:11,title:"Search with _revinclude"},a="Search with _revinclude",c={},d=[{value:"Example",id:"example",level:3},{value:"Request",id:"request",level:4},{value:"Response 200 OK",id:"response-200-ok",level:4},{value:"Parameter syntax",id:"parameter-syntax",level:4},{value:"Notes &amp; behavior",id:"notes--behavior",level:2},{value:"Performance model (how we do it fast)",id:"performance-model-how-we-do-it-fast",level:2},{value:"Example recap (matches your snippet)",id:"example-recap-matches-your-snippet",level:2},{value:"Best practices",id:"best-practices",level:2},{value:"Under the Hood (How _revinclude is executed)",id:"under-the-hood-how-_revinclude-is-executed",level:2},{value:"Execution plan (two-phase gather \u2192 one KV fetch)",id:"execution-plan-two-phase-gather--one-kv-fetch",level:4},{value:"Phase 1 \u2014 Primary keys (FTS)",id:"phase-1--primary-keys-fts",level:5},{value:"Phase 2 \u2014 Secondary keys (FTS)",id:"phase-2--secondary-keys-fts",level:5},{value:"KV retrieval (batched)",id:"kv-retrieval-batched",level:5},{value:"Assemble the Bundle:",id:"assemble-the-bundle",level:5},{value:"Important implementation details",id:"important-implementation-details",level:3},{value:"Projection controls:",id:"projection-controls",level:3},{value:"Isolation &amp; consistency:",id:"isolation--consistency",level:3},{value:"Memory &amp; safety guards:",id:"memory--safety-guards",level:3},{value:"Error handling:",id:"error-handling",level:3},{value:"Performance knobs:",id:"performance-knobs",level:3},{value:"Why this is fast",id:"why-this-is-fast",level:3}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"search-with-_revinclude",children:"Search with _revinclude"})}),"\n",(0,i.jsx)(n.p,{children:"_revinclude returns resources that reference your primary matches, in the same Bundle."}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.h4,{id:"request",children:"Request"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"curl 'http://localhost/fhir/acme/Patient?identifier=http%3A%2F%2Fhospital.smarthealthit.org%7C1032702&_revinclude=Observation%3Asubject'\n"})}),"\n",(0,i.jsx)(n.h4,{id:"response-200-ok",children:"Response 200 OK"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n    "resourceType": "Bundle",\n    "id": "8456baa3-c6cd-4f9e-b44f-d58a140deb9d",\n    "meta": {\n        "lastUpdated": "2025-10-09T20:40:26.236+00:00"\n    },\n    "type": "searchset",\n    "total": 48,\n    "link": [\n        {\n            "relation": "self",\n            "url": "http://localhost/fhir/acme/Patient?_revinclude=Observation%3Asubject&identifier=http%3A%2F%2Fhospital.smarthealthit.org%7C1032702"\n        }\n    ],\n    "entry": [\n        {\n            "fullUrl": "Observation/pregnancy-status",\n            "resource": {\n                "resourceType": "Observation",\n                "id": "pregnancy-status",\n                "meta": {\n                    "versionId": "1",\n                    "lastUpdated": "2025-10-08T17:49:58.299+00:00",\n .......\n .......\n         {\n            "fullUrl": "Patient/example-targeted-provenance",\n            "resource": {\n                "resourceType": "Patient",\n                "id": "example-targeted-provenance",\n                "meta": {\n                    "versionId": "1",\n                    "lastUpdated": "2025-10-08T17:49:58.279+00:00",\n                    "profile": [\n                        "http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient"\n                    ],\n                    "tag": [\n                        {\n                            "system": "http://couchbase.fhir.com/fhir/custom-tags",\n                            "code": "created-by",\n                            "display": "user:anonymous"\n                        }\n .......\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"snippet"})}),"\n",(0,i.jsx)(n.p,{children:"In our example, we first find the Patient (by identifier) and then pull in Observations that reference that Patient via Observation.subject."}),"\n",(0,i.jsx)(n.h4,{id:"parameter-syntax",children:"Parameter syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"_revinclude={ResourceType}:{searchParamName}"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Observation",":subject"," means \u201cinclude Observations whose subject references any of the matched Patients\u201d."]}),"\n",(0,i.jsx)(n.li,{children:"You can specify multiple _revinclude parameters to pull different reverse relationships."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"notes--behavior",children:"Notes & behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No pagination details here: we\u2019ll cover that on the Pagination page. Practically, _revinclude applies to the current page of primary matches\u2014included resources correspond to those items only."}),"\n",(0,i.jsx)(n.li,{children:"De-duplication: included resources are de-duplicated within the Bundle."}),"\n",(0,i.jsx)(n.li,{children:"Sorting (_sort) applies to primary matches. Included resources are not sorted relative to primaries."}),"\n",(0,i.jsxs)(n.li,{children:["Projection:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"_summary and _elements apply to primary results."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Included resources are typically returned in full by default (unless you also provide _elements, which some servers apply to included entries as well)."}),"\n",(0,i.jsx)(n.li,{children:"In this beta, return full included resources for clarity."}),"\n",(0,i.jsx)(n.li,{children:"Consistency: results reflect only committed documents; no partial/dirty reads."}),"\n",(0,i.jsx)(n.li,{children:"Profiles: if the bucket enforces US Core, reverse includes that rely on profile-required references behave consistently (e.g., Observation.subject \u2192 Patient)."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-model-how-we-do-it-fast",children:"Performance model (how we do it fast)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Phase 1: FTS finds primary Patient keys."}),"\n",(0,i.jsx)(n.li,{children:"Phase 2: An FTS/term query finds reverse-linked Observations whose subject.reference is any of the Patient IDs (e.g., Patient/123, Patient/abc-uuid\u2026)."}),"\n",(0,i.jsx)(n.li,{children:"KV fetch assembles the full resources; duplicates are removed."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-recap-matches-your-snippet",children:"Example recap (matches your snippet)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Request"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"GET /fhir/acme/Patient?identifier=http://hospital.smarthealthit.org|1032702&_revinclude=Observation:subject\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Bundle.type = "searchset"'}),"\n",(0,i.jsx)(n.li,{children:"total = < # of matching Patients>"}),"\n",(0,i.jsx)(n.li,{children:"entry[] contains:"}),"\n",(0,i.jsxs)(n.li,{children:["Patient \u2026, ",(0,i.jsx)(n.code,{children:'"search": { "mode": "match" }'})]}),"\n",(0,i.jsxs)(n.li,{children:["Observation \u2026, ",(0,i.jsx)(n.code,{children:'"search": { "mode": "include" }'})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prefer unique identifiers (e.g., MRN) for the primary search to avoid large result sets."}),"\n",(0,i.jsx)(n.li,{children:"Use _count to constrain primary results; we\u2019ll cover pagination on its own page."}),"\n",(0,i.jsxs)(n.li,{children:["Be explicit about the reference you need (e.g., Observation",":subject",", Encounter",":patient",", DocumentReference",":patient",", etc.)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"under-the-hood-how-_revinclude-is-executed",children:"Under the Hood (How _revinclude is executed)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),": return the primary matches plus the reverse-linked resources in a single searchset Bundle\u2014fast, consistent, and deduped."]}),"\n",(0,i.jsx)(n.h4,{id:"execution-plan-two-phase-gather--one-kv-fetch",children:"Execution plan (two-phase gather \u2192 one KV fetch)"}),"\n",(0,i.jsx)(n.h5,{id:"phase-1--primary-keys-fts",children:"Phase 1 \u2014 Primary keys (FTS)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Parse search params for the primary type (e.g., Patient?identifier=\u2026)."}),"\n",(0,i.jsx)(n.li,{children:"Run FTS to get the set of matching document keys (primary keys)."}),"\n",(0,i.jsx)(n.li,{children:"Buffer these keys in memory (paged if large)."}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"phase-2--secondary-keys-fts",children:"Phase 2 \u2014 Secondary keys (FTS)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For each _revinclude=ResourceType",":param",", build an FTS query over the referencing field (e.g., Observation.subject.reference in Observation)."]}),"\n",(0,i.jsx)(n.li,{children:"Search for references equal to any of the primary canonical IDs (e.g., Patient/1234, Patient/id)."}),"\n",(0,i.jsx)(n.li,{children:"Buffer these secondary keys (dedupe as you go)."}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"kv-retrieval-batched",children:"KV retrieval (batched)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Concatenate primary + secondary key buffers (after dedupe)."}),"\n",(0,i.jsx)(n.li,{children:"Perform batched KV gets to fetch full JSON resources in as few round trips as possible."}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"assemble-the-bundle",children:"Assemble the Bundle:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Primary entries: search.mode = "match"'}),"\n",(0,i.jsx)(n.li,{children:'Reverse-included entries: search.mode = "include"'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"important-implementation-details",children:"Important implementation details"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"De-duplication: a resource referenced by multiple primaries appears once in the Bundle."}),"\n",(0,i.jsxs)(n.li,{children:["Ordering:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Primary results respect your requested sort (_sort) or server default."}),"\n",(0,i.jsx)(n.li,{children:"Included entries are appended (no global sort relative to primaries)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"projection-controls",children:"Projection controls:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We honor _summary / _elements for primary results."}),"\n",(0,i.jsx)(n.li,{children:"Included resources are returned in full in beta for clarity (projection of includes can be revisited later)."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"isolation--consistency",children:"Isolation & consistency:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Queries operate at read-committed semantics\u2014only committed docs are returned."}),"\n",(0,i.jsx)(n.li,{children:"FTS reflects committed state post-transaction; results are consistent with KV reads at response time."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"memory--safety-guards",children:"Memory & safety guards:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Soft cap on maximum keys per phase (prevents runaway includes)."}),"\n",(0,i.jsx)(n.li,{children:"Server may truncate secondary include keys if they exceed configured limits and return an OperationOutcome note."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'If a referenced resource goes missing between FTS and KV fetch (rare), we skip it and add an OperationOutcome entry with severity="warning".'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-knobs",children:"Performance knobs:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Key buffering is chunked; KV gets are batched (size-tuned for your cluster)."}),"\n",(0,i.jsx)(n.li,{children:"Per-type FTS indexes (or General index) map reference fields as keyword for exact matches."}),"\n",(0,i.jsx)(n.li,{children:"Result caching of primary keys enables efficient pagination (covered in the Pagination section)."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"why-this-is-fast",children:"Why this is fast"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"FTS does the set discovery (strings, tokens, dates, references) efficiently."}),"\n",(0,i.jsx)(n.li,{children:"KV does the document retrieval in microseconds with batching."}),"\n",(0,i.jsx)(n.li,{children:"The split keeps FTS work minimal and pushes bulk I/O to KV where Couchbase shines."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);