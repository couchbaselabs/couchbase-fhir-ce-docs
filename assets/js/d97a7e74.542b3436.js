"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1611],{3401:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"API/put-single","title":"PUT Single Resource","description":"Use PUT to create or replace a resource at a client-chosen ID.","source":"@site/docs/API/put-single.mdx","sourceDirName":"API","slug":"/API/put-single","permalink":"/couchbase-fhir-ce-docs/docs/API/put-single","draft":false,"unlisted":false,"editUrl":"https://github.com/couchbaselabs/couchbase-fhir-ce-docs/tree/master/docs/API/put-single.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"PUT Single Resource"},"sidebar":"tutorialSidebar","previous":{"title":"POST Single Resource","permalink":"/couchbase-fhir-ce-docs/docs/API/post-single"}}');var i=s(4848),r=s(8453);const a=s.p+"assets/images/put-single-71b814871e0a3bf45602606090c1b691.png",c={sidebar_position:3,title:"PUT Single Resource"},o="PUT \u2014 Create or Update a Resource (by ID)",l={},d=[{value:"Endpoint",id:"endpoint",level:3},{value:"Key behaviors",id:"key-behaviors",level:2},{value:"Create vs Update responses:",id:"create-vs-update-responses",level:3},{value:"What the server adds/updates (meta)",id:"what-the-server-addsupdates-meta",level:3},{value:"Behind the scenes (transactional flow)",id:"behind-the-scenes-transactional-flow",level:2},{value:"Notes &amp; good practices",id:"notes--good-practices",level:2},{value:"When to use PUT vs POST:",id:"when-to-use-put-vs-post",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"put--create-or-update-a-resource-by-id",children:"PUT \u2014 Create or Update a Resource (by ID)"})}),"\n",(0,i.jsx)(n.p,{children:"Use PUT to create or replace a resource at a client-chosen ID.\nUnlike POST (where the server generates the ID), PUT preserves the identifier in the URL."}),"\n",(0,i.jsx)(n.h3,{id:"endpoint",children:"Endpoint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/fhir/<bucket>/<resourceType>/<id>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Example:\n",(0,i.jsx)(n.a,{href:"http://localhost/fhir/acme/Patient/1234",children:"http://localhost/fhir/acme/Patient/1234"})]}),"\n",(0,i.jsx)("img",{src:a,alt:"ImgPutSingle"}),"\n",(0,i.jsx)(n.h2,{id:"key-behaviors",children:"Key behaviors"}),"\n",(0,i.jsx)(n.p,{children:"ID preservation: The resource is stored with the ID from the URL (1234).\nIf the body includes id, it should match the URL. If omitted, the server sets it to the URL ID."}),"\n",(0,i.jsx)(n.h3,{id:"create-vs-update-responses",children:"Create vs Update responses:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"201 Created \u2014 when no existing resource with that ID was present."}),"\n",(0,i.jsx)(n.li,{children:"200 OK \u2014 when an existing resource with that ID is replaced."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Response body: Returns the canonical server version of the resource, including an updated meta block.\nLocation header: Points to /fhir/bucket/type/id."}),"\n",(0,i.jsx)(n.h3,{id:"what-the-server-addsupdates-meta",children:"What the server adds/updates (meta)"}),"\n",(0,i.jsx)(n.p,{children:"On every successful PUT, the server manages meta:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"versionId"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"1" if this PUT creates the resource.'}),"\n",(0,i.jsx)(n.li,{children:"Increments if this PUT updates an existing resource."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"lastUpdated"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Server timestamp when the change was applied."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tag"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Includes an audit tag:"}),"\n",(0,i.jsx)(n.li,{children:"created-by for creates"}),"\n",(0,i.jsx)(n.li,{children:"updated-by for updates"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"profile"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatically added when the bucket is configured for US Core (or another profile)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Clients should treat meta as server-managed."})}),"\n",(0,i.jsx)(n.h2,{id:"behind-the-scenes-transactional-flow",children:"Behind the scenes (transactional flow)"}),"\n",(0,i.jsx)(n.p,{children:"Because PUT must preserve the ID and handle versioning correctly, the server wraps the operation in a transaction:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'Begin transaction\n    Check existence of Patient/1234 in the Patient collection\n        If it exists (update):\n            Copy the current version of Patient/1234 into the Versions collection\n            Increment meta.versionId\n            Set audit tag to updated-by\n        If it does not exist (create):\n            Create a new document at Patient/1234\n            Initialize meta.versionId to "1"\n            Set audit tag to created-by\n            Set meta.lastUpdated to the server timestamp\nCommit transaction\n'})}),"\n",(0,i.jsx)(n.p,{children:"This guarantees:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A full history of prior states (for _history/vread)"}),"\n",(0,i.jsx)(n.li,{children:"Correct version increments"}),"\n",(0,i.jsx)(n.li,{children:"Consistent audit trail"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"notes--good-practices",children:"Notes & good practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Upsert semantics"}),": PUT is idempotent at a given ID\u2014re-sending the same content won\u2019t change the resource beyond lastUpdated semantics."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation"}),": If validation is enabled for the bucket, the payload is validated (FHIR R4 or US Core)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strict"}),": rejects invalid content"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lenient"}),": logs warnings, accepts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Disabled"}),": skips validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Searchability"}),": After commit, the resource is indexed via FTS and immediately searchable (subject to index refresh intervals)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-put-vs-post",children:"When to use PUT vs POST:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use PUT when your client controls the resource\u2019s stable ID."}),"\n",(0,i.jsx)(n.li,{children:"Use POST when the server should assign a UUID."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);